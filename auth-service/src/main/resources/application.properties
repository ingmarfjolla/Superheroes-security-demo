quarkus.application.name=auth-service
quarkus.banner.path=banner.txt


####HTTP & REST STUFF#####
quarkus.http.port=8086
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.http.cors.access-control-allow-credentials=true
###########

####WEBAUTHN STUFF####
#quarkus.webauthn.origin=http://localhost:8080
quarkus.http.auth.session.encryption-key=ingmartestingencryptionkey

#######################

####OPENFGA STUFF#####
#quarkus.openfga.url=http://localhost:8088
quarkus.openfga.store=Superheroes
quarkus.zanzibar.filter.enabled=false
quarkus.zanzibar.filter.deny-unannotated-resource-methods=false
quarkus.openfga.devservices.store-name=Superheroes
quarkus.openfga.devservices.authorization-model={"schema_version": "1.1", "type_definitions": [{"type": "feature", "relations": {"associated_plan": {"this": {}}, "can_access": {"tupleToUserset": {"computedUserset": {"relation": "subscriber"}, "tupleset": {"relation": "associated_plan"}}}}, "metadata": {"relations": {"associated_plan": {"directly_related_user_types": [{"type": "plan"}]}, "can_access": {"directly_related_user_types": []}}}}, {"type": "plan", "relations": {"subscriber": {"this": {}}}, "metadata": {"relations": {"subscriber": {"directly_related_user_types": [{"type": "user"}]}}}}, {"type": "user", "relations": {}, "metadata": {}}]}
quarkus.openfga.devservices.authorization-tuples=[{ "user":"plan:full", "relation": "associated_plan", "object": "feature:fight"},{ "user":"plan:ref", "relation": "associated_plan", "object": "feature:fight"},{ "user":"plan:full", "relation": "associated_plan", "object": "feature:ai"}]
#quarkus.openfga.devservices.authorization-model-location=classpath:auth-model.json
#######################

####DATABASE STUFF####
quarkus.datasource.db-kind = postgresql
quarkus.hibernate-orm.database.generation = update
quarkus.datasource.credentials-provider = quarkus
quarkus.datasource.devservices.port=5433
######################


# OpenAPI
quarkus.smallrye-openapi.info-title=Auth API
quarkus.smallrye-openapi.info-description=This API performs authentication and authorization for different services.
quarkus.smallrye-openapi.info-version=1.0
quarkus.smallrye-openapi.info-contact-name=Quarkus
quarkus.smallrye-openapi.info-contact-url=https://github.com/quarkusio
quarkus.swagger-ui.always-include=true

# Container image
quarkus.container-image.builder=docker
quarkus.container-image.registry=quay.io
quarkus.container-image.group=quarkus-super-heroes
quarkus.container-image.name=${quarkus.application.name}


quarkus.vault.credentials-provider.quarkus.credentials-role=mydbrole
quarkus.vault.credentials-provider.quarkus.credentials-mount=database

#quarkus.vault.devservices.init-commands= secrets enable database,write database/config/mydb plugin_name=postgresql-database-plugin allowed_roles=mydbrole connection_url=postgresql://{{username}}:{{password}}@host.docker.internal:5433/quarkus?sslmode=disable username=quarkus password=quarkus, cat <<EOF > vault-postgres-creation.sql  CREATE ROLE "{{name}}" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO "{{name}}";GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public to "{{name}}"; EOF, write database/roles/mydbrole db_name=quarkus creation_statements=@vault-postgres-creation.sql default_ttl=1h max_ttl=24h revocation_statements="ALTER ROLE \"{{name}}\" NOLOGIN;" renew_statements="ALTER ROLE \"{{name}}\" VALID UNTIL '{{expiration}}';" , cat <<EOF | policy write vault-quickstart-policy -path "secret/data/myapps/vault-quickstart/*" {capabilities = ["read"]} path "database/creds/mydbrole" {capabilities = [ "read" ]} EOF
#quarkus.vault.devservices.init-commands= secrets enable database,write database/config/quarkus plugin_name=postgresql-database-plugin allowed_roles=mydbrole connection_url=postgresql://{{username}}:{{password}}@host.docker.internal:5433/quarkus?sslmode=disable username=quarkus password=quarkus, status | sh -c 'cat <<EOF > vault-postgres-creation.sql  CREATE ROLE "{{name}}" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT ALL ON ALL TABLES IN SCHEMA public TO "{{name}}";GRANT SELECT ON ALL SEQUENCES IN SCHEMA public to "{{name}}"; EOF', write database/roles/mydbrole db_name=quarkus creation_statements=@vault-postgres-creation.sql default_ttl=1h max_ttl=24h revocation_statements="ALTER ROLE \"{{name}}\" NOLOGIN;" renew_statements="ALTER ROLE \"{{name}}\" VALID UNTIL '{{expiration}}';" , status | sh -c 'cat <<EOF | policy write vault-quickstart-policy -path "secret/data/myapps/vault-quickstart/*" {capabilities = ["read"]} path "database/creds/mydbrole" {capabilities = [ "read" ]} EOF'


###WORKS printf
#quarkus.vault.devservices.init-commands=secrets enable database, write database/config/quarkus plugin_name=postgresql-database-plugin allowed_roles=mydbrole connection_url=postgresql://{{username}}:{{password}}@host.docker.internal:5433/quarkus?sslmode=disable username=quarkus password=quarkus, status | sh -c 'printf "CREATE ROLE \\\\\\\"%s\\\\\\\" WITH LOGIN PASSWORD '\\\\\''%s'\\\\\'' VALID UNTIL '\\\\\''%s'\\\\\''; GRANT ALL ON ALL TABLES IN SCHEMA public TO \\\\\\\"%s\\\\\\\"; GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO \\\\\\\"%s\\\\\\\";\n" "{{name}}" "{{password}}" "{{expiration}}" "{{name}}" "{{name}}" > vault-postgres-creation.sql', write database/roles/mydbrole db_name=quarkus creation_statements=@vault-postgres-creation.sql default_ttl=1h max_ttl=24h revocation_statements="ALTER ROLE \\\\\\\"{{name}}\\\\\\\" NOLOGIN;" renew_statements="ALTER ROLE \\\\\\\"{{name}}\\\\\\\" VALID UNTIL '{{expiration}}';", status | sh -c 'echo -e 'path "secret/data/myapps/vault-quickstart/*" {\n  capabilities = ["read", "create"]\n}\npath "database/creds/mydbrole" {\n  capabilities = [ "read" ]\n}' | vault policy write vault-quickstart-policy -'

####WORKS echo
quarkus.vault.devservices.init-commands=secrets enable database, write database/config/quarkus plugin_name=postgresql-database-plugin allowed_roles=mydbrole connection_url=postgresql://{{username}}:{{password}}@host.docker.internal:5433/quarkus?sslmode=disable username=quarkus password=quarkus, status | sh -c 'echo "CREATE ROLE \\\\\\\"{{name}}\\\\\\\" WITH LOGIN PASSWORD '\\\\\\\''{{password}}'\\\\\\\'' VALID UNTIL '\\\\\\\''{{expiration}}'\\\\\\\''; GRANT ALL ON ALL TABLES IN SCHEMA public TO \\\\\\\"{{name}}\\\\\\\"; GRANT SELECT ON ALL SEQUENCES IN SCHEMA public to \\\\\\\"{{name}}\\\\\\\";" > vault-postgres-creation.sql', write database/roles/mydbrole db_name=quarkus creation_statements=@vault-postgres-creation.sql default_ttl=1h max_ttl=24h revocation_statements="ALTER ROLE \\\\\\\"{{name}}\\\\\\\" NOLOGIN;" renew_statements="ALTER ROLE \\\\\\\"{{name}}\\\\\\\" VALID UNTIL '{{expiration}}';", status | sh -c 'echo -e 'path "secret/data/myapps/vault-quickstart/*" {\n  capabilities = ["read", "create"]\n}\npath "database/creds/mydbrole" {\n  capabilities = [ "read" ]\n}' | vault policy write vault-quickstart-policy -'


#quarkus.vault.devservices.init-commands= secrets enable database,write database/config/mydb plugin_name=postgresql-database-plugin allowed_roles=mydbrole connection_url=postgresql://{{username}}:{{password}}@host.docker.internal:5433/quarkus?sslmode=disable username=quarkus password=quarkus,touch vault-postgres-creation.sql,echo "CREATE ROLE "{{name}}" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';" >> vault-postgres-creation.sql,echo "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO "{{name}}";" >> vault-postgres-creation.sql,echo "GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public to "{{name}}";" >> vault-postgres-creation.sql,write database/roles/mydbrole db_name=quarkus creation_statements=@vault-postgres-creation.sql default_ttl=1h max_ttl=24h revocation_statements="ALTER ROLE \"{{name}}\" NOLOGIN;" renew_statements="ALTER ROLE \"{{name}}\" VALID UNTIL '{{expiration}}';" , cat <<EOF | policy write vault-quickstart-policy -path "secret/data/myapps/vault-quickstart/*" {capabilities = ["read"]} path "database/creds/mydbrole" {capabilities = [ "read" ]} EOF
